version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: profai-postgres
    environment:
      POSTGRES_DB: profai_tcc
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: profai_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - profai-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: profai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - profai-network

  # ProfAi Application
  app:
    build: .
    container_name: profai-app
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: profai_tcc
      DB_USER: postgres
      DB_PASSWORD: profai_password
      REDIS_URL: redis://redis:6379
      JWT_SECRET: profai-super-secret-jwt-key-2024
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./exports:/app/exports
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - profai-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: profai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./dist:/usr/share/nginx/html
    depends_on:
      - app
    networks:
      - profai-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  profai-network:
    driver: bridge

